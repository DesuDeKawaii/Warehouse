@page "/storage"
@using warehouse_management_application.Storages
@using warehouse_management_core.DTO_s
@using warehouse_management_core.Entities
@layout AppLayout
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Storages</PageTitle>

<div class="container mt-4">
    <h3 class="text-center">Storages List</h3>

    @if (storages == null)
    {
        <p class="text-center">Loading...</p>
    }
    else if (!storages.Any())
    {
        <p class="text-center">No storages found.</p>
    }
    else
    {
        <div class="row">
            @foreach (var storage in storages)
            {
                <div class="col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@storage.Name</h5>
                            <p class="card-text">@storage.Description</p>
                            <ul>
                                <li><strong>Capacity:</strong> @storage.Capacity</li>
                                <li><strong>Latitude:</strong> @storage.Latitude</li>
                                <li><strong>Longitude:</strong> @storage.Longitude</li>
                                <li><strong>Temperature:</strong> @storage.Temperature</li>
                            </ul>
                            <!-- Кнопка для перехода на детали склада -->
                            @* <button class="btn btn-info" @onclick="() => NavigateToStorage(storage.Id.Value)">View Details</button> *@
                            <button class="btn btn-danger" @onclick="() => HandleDeleteStorage(storage.Id.Value)">Delete</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Кнопка для создания нового склада -->
    <div class="text-center mt-4">
        <button class="btn btn-primary" @onclick="ShowCreateStorageForm">Create New Storage</button>
    </div>

    <!-- Create Storage Form -->
    @if (showCreateForm)
    {
        <div class="mt-4">
            <h3 class="text-center">Create New Storage</h3>
            <EditForm Model="newStorage" OnValidSubmit="HandleCreateStorage" class="col-md-8 mx-auto">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <!-- Форма для создания склада -->
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="name">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="newStorage.Name" placeholder="Enter storage name" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="description">Description</label>
                        <InputText id="description" class="form-control" @bind-Value="newStorage.Description" placeholder="Enter storage description" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="capacity">Capacity</label>
                        <InputNumber id="capacity" class="form-control" @bind-Value="newStorage.Capacity" placeholder="Enter storage capacity" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="temperature">Temperature</label>
                        <InputNumber id="temperature" class="form-control" @bind-Value="newStorage.Temperature" placeholder="Enter temperature" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="latitude">Latitude</label>
                        <InputNumber id="latitude" class="form-control" @bind-Value="newStorage.Latitude" placeholder="Enter latitude" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="longitude">Longitude</label>
                        <InputNumber id="longitude" class="form-control" @bind-Value="newStorage.Longitude" placeholder="Enter longitude" />
                    </div>
                </div>
                <div class="text-center mt-3">
                    <button class="btn btn-success" type="submit">Create Storage</button>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter] public Guid storageId { get; set; }
    private List<StorageDTO> storages;
    private StorageDTO newStorage = new StorageDTO();
    private bool showCreateForm = false;
    private List<ItemStorage> itemStorage;

    protected override async Task OnInitializedAsync()
    {
        // Загрузка списка всех складов
        storages = await Http.GetFromJsonAsync<List<StorageDTO>>("https://localhost:7110/api/storages");
        
    }

    private void ShowCreateStorageForm()
    {
        // Показать форму для создания нового склада
        showCreateForm = true;
    }

    private async Task HandleCreateStorage()
    {
        try
        {
            // Создание нового склада
            var response = await Http.PostAsJsonAsync("https://localhost:7110/api/storage/create", newStorage);

            if (response.IsSuccessStatusCode)
            {
                // Обновление списка складов после создания
                storages = await Http.GetFromJsonAsync<List<StorageDTO>>("https://localhost:7110/api/storages");
                showCreateForm = false; // Скрытие формы
            }
            else
            {
                Console.WriteLine("Error creating storage.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task HandleDeleteStorage(Guid storageId)
    {
        try
        {
            // Удаление склада
            var response = await Http.DeleteAsync($"https://localhost:7110/api/storage/{storageId}");

            if (response.IsSuccessStatusCode)
            {
                // Обновление списка складов после удаления
                storages = await Http.GetFromJsonAsync<List<StorageDTO>>("https://localhost:7110/api/storages");
            }
            else
            {
                Console.WriteLine("Error deleting storage.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void NavigateToStorage(Guid storageId)
    {
        // Переход на страницу с подробностями склада
        NavigationManager.NavigateTo($"https://localhost:7110/api/storage/{storageId}");
    }
}
