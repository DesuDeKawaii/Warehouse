@page "/storage/{storageId:guid}"
@using warehouse_management_core.DTO_s
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Storage Details</PageTitle>

<div class="container mt-4">
    @if (storage == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <h3>Storage Details</h3>
        <p><strong>Name:</strong> @storage.Name</p>
        <p><strong>Description:</strong> @storage.Description</p>
        <p><strong>Capacity:</strong> @storage.Capacity</p>
        <p><strong>Latitude:</strong> @storage.Latitude</p>
        <p><strong>Longitude:</strong> @storage.Longitude</p>
        <p><strong>Temperature:</strong> @storage.Temperature</p>

        <h4>Items in Storage</h4>
        <ul>
            @foreach (var itemStorage in itemStorages)
            {
                <li>@itemStorage.Item - @itemStorage.Amount</li>
            }
        </ul>

        <button class="btn btn-primary" @onclick="NavigateBack">Back to List</button>
    }
</div>

@code {
    [Parameter] public Guid storageId { get; set; }
    private StorageDTO storage;
    private List<ItemStorage> itemStorages;

    protected override async Task OnInitializedAsync()
    {
        // Получаем детали склада
        storage = await Http.GetFromJsonAsync<StorageDTO>($"https://localhost:7110/api/storage/{storageId}");

        // Получаем товары на складе
        itemStorages = await Http.GetFromJsonAsync<List<ItemStorage>>($"https://localhost:7110/api/storage/{storageId}/items");
    }

    private void NavigateBack()
    {
        // Возврат к списку складов
        NavigationManager.NavigateTo("/storage");
    }
}
